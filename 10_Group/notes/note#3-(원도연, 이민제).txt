객체 생성 및 활용
	
페어 프로그래밍(토론) - 객체 생성 및 활용
	circle 코드를 참고하며 진행
	클래스일 경우에 끝에 ;가 붙은 특징 재 확인
	getArea()함수를 double로 선언 및 계산시 문제가 발생(답안 확인자는 int나double나 문제 없다고 판단하여 초기에는 그대로 둠)
	double을 int로 변경하니 오류없이 결과 출력완료
	정확한 오류 원인은 파악할 수 없었으나 불필요하게 double가 필요 없다라는 것을 알게 됨

객체 생성 및 생성자 실행 과정
	생성된 객체에 대해 실행되는 과정을 그림으로 표현된 강의자료와 교수님의 설명을 통해 이해하였음

위임 생성자 (토론)
	중복되는 코드의 간소화로 얻은 이점이 있는 부분에서 상속과 비슷한 이점이 있다는 의견
	하지만 자료에 설명된 코드만으로는 얼마나 간소화 된 것인지 직접 체감을 하지 못한다는 의견
	대규모의 코드를 작업할 때에 좀 더 잘 파악될 것이라는 의견
	이후 교수님 추가 설명을 통해 내용을 더 구체적으로 이해

페어프로그래밍(토론) - 기본 생성자
	기존에 위에서 생성한 코드를 가지고 기본생성자의 강의자료를 참고하며 진행
	매개변수를 두개 받는 생성자, 기본 생성자 작성까지는 잘 진행하였으나, 
	이후 isSquare함수를 작성하는 과정에서 구현에 어려움을 겪음 
	하지만 그냥 바로 답안을 보았을 때 보다 직접해보는 과정에서 막혔을때 답안을 확인하니 이해도가 높아짐

소멸자
	객체가 소멸되는 시점에서 자동으로 호출되는 함수
	쓸데없이 메모리를 잡아먹으면 안되기 때문에 반드시 소멸자도 있어야한다
	오직 한번만 자동 호출, 임의로 호출 불가.

	생성자와 소멸자의 실행 순서에 대해서 각종 상황에 따른 이해

접근 지정자
	캡슐화의 목적으로 객체의 보호와 보안 기능을 한다.
	prvaite, public, protected 3가지 접근 지정자가 존재함
	

함수 호출에 따른 시간 오버헤드
	소요되는 시간에 대한 오버헤드 문제에 대해 다룸
	심각한 문제가 발생할 수 도 있기에 코드를 작성할 시 이 부분 고려해야함

인라인 함수
	inline키워드로 선언된 함수로 
	처리하는 방식이 매크로와 비슷하며 확장 후에는 사라진다
	오버헤드가 존재하지 않으며 실행속도가 개선되는 이점이 있다
	컴파일러에 의해 이뤄진다
	인라인 함수는 cpp프로그램의 실행속도 향상의 목적이기에 자주 호출되는 짧은 코드에 사용된다.
		이유는 cpp에는 짧은 코드의 멤버 함수가 많기 때문이다.
	장단점
		장점 - 프로그램 실행 속도 개선
		단점 - 인라인 함수 선언등의 코드 삽입으로 전체 코드 길이 및 크기 증가
			통계적으로 최대 30%까지 증가한다
			그렇기에 짧은 코드의 함수를 인라인으로 선언하는 것이 좋다.
구조체
	대부분의 속성이 클래스와 동일하지만 디폴트 접근 지정자가 public이라는 점에서 차이가 있다.

155페이지 11번 문제 실습 진행
