9장 가상 함수와 추상 클래스

학습 목표
	상속에서 함수 재정의를 이해
	가상 함수와 오버라이딩, 동적 바인딩의 개념 이해
	가상 소멸자의 중요성을 이해
	가상 함수를 활용하여 프로그램을 작성
	순수 가상함수화 추상 클래스를 이해하고 작성

9.1 상속 관계에서의 함수 재정의
	예자 9-1을 참고하며 파생클래스에서 함수를 재정의 하는 사례 확인

9.2 가상 함수와 오버라이딩
	가상함수
		virtual 키워드로 선언된 멤버 함수
		virtual 키워드의 의미: 동적 바인딩 지시어, 컴파일러에게 함수에 대한 호출 바인딩을 실행시간까지 미루도록지시

	함수 오버라이딩
		파생 클래스에서 기본 클래스의 가상 함수와 동일한 이름의 함수 선언
			기본 클래스의 가상 함수 존재감 상실시킴
			파생클래스에서 오버라이딩한 함수가 호출되도록 동적 바인딩
			함수 재정의 라고도 부름
			다형성의 한 종류
 오버라이딩의 개념 이해

함수 재정의와 오버라이딩 사례 비교하며 이해	
	강의자료 참고

함수 재정의 & 오버라이딩 용어의 혼란 정리 내용 이해

예제 9-2 오버라이딩과 가상함수 호출(페어프로그래밍)
	class Base에서 가상함수 선언을 확인하였으며 main함수에서 이를 호출함
	이후 업캐스팅과 동적 바인딩 발생을 코드를 작성하며 이해함

오버라이딩의 목적 -  파생 클래스에서 구현할 함수 인터페이스 제공
	다형성의 실현
		draw() 가상 함수를 가진 기본 클래스 Shape
		오버라이딩을 통해 Circle, Rect, Line 클래스에서 자신만의 Draw() 구현

가상 소멸자
	소멸자를 virtual 키워드로 선언
	소멸자 호출 시 동적 바인딩 발생

예제 9-6을 참고하며 소멸자를 가상 함수로 선언하는 과정 이해

오버로딩과 함수 재정의, 오버라이딩을 비교

가상 함수를 가진 기본 클래스의 목적 실습하며 페이플로그래밍으로 토론
각 클래스에 대한 헤더파일과 메인 상속되는 파일의 구조 이해
	이후 가상 함수 오버라이딩에 대해 예시를 참고
		파생클래스마다 다르게 구현되며 가상함수 Draw()를 재정의

동적 바인딩 실행에서 파생 클래스의 가상함수 실행을 이해
	main함수가 실행될 때 객체간의 연결점 이해

기본 클래스의 포인터 활용
	파생 클래스접근
		pStart, pLast, p의 타입이 Shape*
		링크드 리스트를 따라 Shape을 상속받은 파생 객체들 접근
		p->paint()의 간단한 호출로 파생 객체에 오버라이딩된 draw()

추상 클래스
	순수 가상 함수
	기본 클래스의 가상함수 목적
		파생 클래스에서 재정의 할 함수를 알려주는 역할
			실행할 코드를 작성할 목적이 아님
	순수 가상 함수
		pure vitual function
		함수의 코드가 없고 선언만 있는 가상 멤버 함수
		선언 방법

	추상클래스 : 최소한 하나의 순수 가상 함수를 가진 클래스
		특징 : 온전한 클래스가 아니므로 객체 생성 불가능
			추상 클래스의 포인터는 선언 가능

	추상 클래스의 목적
		추상 클래스의 인스턴스를 생성할 목적 아님
		상속에서 기본 클래스의 역할을 하기 위함
			순수 가상함수를 통해 파생 클래스에서 구현할 함수의
			형태를 보여주는 인터페이스 역할
			추상 클래스의 모든 멤버 함수를 순수 가상 함수로 선언
			필요 없음
	추상 클래스의 상속
		추상 클래스를 단순 상속하면 자동 추상 클래스
	추상 클래스의 구현
		추상 클래스를 상속받아 순수 가상 함수를 오버라이딩
		파생 클래스는 추상 클래스가 아님
이전에 실습한 내용 추상 클래스로 수정
	
예제 9-6을 통해 추상 클래스 구현 연습 시행
	

추상 클래스를 상속받는 파생 클래스 구현 연습 실습



