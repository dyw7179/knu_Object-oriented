일반화와 템플릿의 개념

함수 중복이 약점 - 중복 함수의 코드 중복
	두 함수는 매개 변수만 다르고 나머지 코드는 동일하지만
	동일한 코드가 중복 작성됨

일반화와 템플릿
	제네릭 또는 일반화
		함수나 클래스를 일반화 시키고 매개변수 타입을 지정하여
		틀에서 찍어내듯 함수나 클래스 코드를 생산하는 기법
	템플릿
		함수나 클래스를 일반화하는 C++도구
		template 키워드로 함수나 클래스 선언
			변수나 매개변수 타입만 다름
		제네릭 타입 - 일반화를 위한 데이터 타입
	템플릿 선언 코드를 확인하며 이해

중복 함수들로부터 템플릿 만들기 사례 코드를 통한이해

템플릿으로부터의 구체화
	구체화 
		템플릿의 제네릭 타입에 구체적인 타입 지정
		템플릿 함수로부터 구체화된 함수의 소스 코드 생성
제네릭 함수로부터 구체화된 함수 생성 사례
	제네릭 함수화 구체화 코드 이해

예제 10-1 제네릭 myswap() 함수 만들기를 통해 이해
	함수 구체화 및 호출하는 부분들 집중

구체화 오류
	제네릭 타입에 구체적인 타입 지정시  주의
	컴파일 오류 부분 확인 

템플릿 장점과 제네릭 프로그래밍
	템플릿의 장점
		함수 코드의 재사용
			높은 재사용성
	템플릿 단점
		포팅에 취약
			컴파일러에 따라 지원하지 않을 수 있음
		컴파일 오류 메시지 빈약, 디버깅에 어려움
	제네릭 프로그래밍
		일반화 프로그래밍이라도고 함
		제네릭 함수나 제네릭 클래스를 활용하는 프로그래밍 기법
		C++에서 STL제공, 활용
	보편화 추세
		Java, C#등 많은 언어에서 활용

예제 10-2 큰값을 리턴하는 bigger()함수 만들기 연습으로 실습 진행

예제 10–3 배열의 합을 구하여 리턴하는 제네릭 add() 함수 만들기 연습으로 실습

예제 10-4 배열을 복사하는 제네릭 함수mcopy() 함수 만들기 연습으로 실습 진행
	mcopy()의 T1은 int로, T2 는 double로 구체화
	mcopy()의 T1, T2 모두 char로 구체화 진행

배열을 출력하는 print() 템플릿 함수의 문제점 실습을 통한 확인
	T가 char로 구체화되는 경우, 정수 1, 2, 3, 4, 5에
	대한 그래픽 문자 출력
	print() 템플릿의 T가 int 타입으로 구체화
	print() 템플릿의 T가 char 타입으로 구체화
	char로 구체화되면 숫자대신 문자가
	출력되는 문제 발생함

예제 10-5 템플릿 함수보다 중복 함수가 우선인 사항 실습으로 확인
	템플릿 함수와 중복된 print() 함수
	중복된 print() 함수가 우선 바인딩
	템플릿 print() 함수로부터 구체화
	결과 확인

제네릭 클래스 만들기
	제네릭 클래스 선언, 제네릭 클래스 구현,클래스 구체화 및 객체 활용 등
	코드로 실습

예제 10–6 제네릭 스택 클래스 만들기 코드를 통한 실습

예제 10–7 제네릭 스택의 제네릭 타입을 포인터나 클래스로 구체화하는 실습 진행

C++에서 cout << a << b << c;의 실행 순서 강의자료를 참고하여 확인

